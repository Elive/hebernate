#!/bin/bash
SOURCE="$0"
source /usr/lib/elive-tools/functions
REPORTS="1"
el_make_environment
#. gettext.sh
#TEXTDOMAIN="hebernate"
#export TEXTDOMAIN

usage(){
    # Usage
    if [[ -z "${1}" ]] ; then
        echo -e "Usage: $(basename $BASH_SOURCE) suspend|hibernate|stop|shutdown|reboot|lock"
        echo -e ""
        echo -e "Notes: 'stop' means suspending the system and hibernate it after a while (useful for when you don't know how much time you will stop the system, this should be the default stop of the system)"
        echo -e ""
        exit 1
    fi
}

do_fallback(){
    case "$1" in
        reboot)
            if ! /sbin/reboot ; then
                if el_check_sudo_automated ; then
                    el_sudo /sbin/reboot
                else
                    #gksu /sbin/reboot
                    /sbin/reboot
                fi
            fi
            ;;
        shutdown)
            if ! /sbin/poweroff ; then
                if el_check_sudo_automated ; then
                    el_sudo /sbin/poweroff
                else
                    #gksu /sbin/poweroff
                    /sbin/poweroff
                fi
            fi
            ;;
        suspend|hibernate)
            if el_check_sudo_automated ; then
                el_sudo /sbin/hebernate "$1"
            else
                # seems like we should not need su
                #gksu /sbin/hebernate "$1"
                /sbin/hebernate "$1"
            fi
            ;;
    esac
}

do_action(){
    # TODO: exit from desktop? we should not need to do it

    if systemctl "$1" 2>>"$logs_error" ; then
        # all good, exit
        exit 0
    else
        is_failed=1
        el_warning "failed to run: systemctl '$1': $(cat "$logs_error" )"
    fi

    # maybe with sudo?
    if el_check_sudo_automated ; then
        if el_sudo systemctl "$1" 2>>"$logs_error" ; then
            # all good, exit
            exit 0
        else
            is_failed=1
            el_warning "failed to run: systemctl '$1' (sudo): $(cat "$logs_error" )"
        fi
    else
        el_warning "no privileges for el_sudo, implement a gksu feature instead?"
    fi

    # show errors if any
    if ((is_failed)) && [[ -s "$logs_error" ]] ; then
        $guitool --error --text="$( cat "$logs_error" | uniq )"
    fi

    # no way, run a fallback
    do_fallback "$1"

}



main(){
    # pre {{{
    local arg

    if [[ -z "$1" ]] ; then
        usage
    fi

    logs_error="$( mktemp )"
    el_add_on_exit  rm -f "$logs_error"

    # }}}

    for arg in "$@"
    do
        case "$arg" in
            suspend)
                is_suspend=1
                do_action "suspend"
                ;;
            hibernate)
                is_hibernate=1
                do_action "hibernate"
                ;;
            shutdown)
                is_shutdown=1
                do_action "poweroff"
                ;;
            reboot)
                is_reboot=1
                do_action "reboot"
                ;;
            lock)
                is_lock=1
                if [[ -x "$(which i3lock-fancy)" ]] ; then
                    i3lock-fancy -g
                    sleep 1 ; xset dpms force off
                else
                    if [[ -x "$(which i3lock)" ]] ; then
                        i3lock -f -c 000000
                        sleep 1 ; xset dpms force off
                    fi
                fi
#revert() {
  #xset dpms 0 0 0
#}
#trap revert HUP INT TERM
#xset +dpms dpms 5 5 5
#i3lock -n
#revert

                ;;
            stop)
                is_stop=1
                do_action "suspend-then-hibernate"
                ;;
            *)
                usage
                ;;
        esac
    done


}

#
#  MAIN
#
main "$@"

# vim: set foldmethod=marker :
