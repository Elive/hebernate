#!/bin/bash
SOURCE="$0"
source /usr/lib/elive-tools/functions
EL_REPORTS="1"
el_make_environment
. gettext.sh
TEXTDOMAIN="hebernate"
export TEXTDOMAIN

# Lock system (good one) {{{
lockfile="/tmp/.$(basename $0)-${USER}.lock"

exit_ok(){
    rm -f "$lockfile"
}
exit_error(){
    rm -f "$lockfile"
}

#if [[ -r "$lockfile" ]] ; then
    #PROCCESS="$(cat $lockfile)"
#else
    #PROCCESS=" "
#fi
#if (ps up $PROCCESS) 1>/dev/null 2>&1 ; then
    #el_error "$(basename $0) already running, args '$@', processes:\n$(ps aux | grep -v grep | grep -v "$$" | grep elive-pm )"
    #exit
#else
    #echo $$ > "$lockfile"
#fi

# already running process on specific mode:
if [[ -r "$lockfile" ]] ; then
    PROCCESS="$$"
    case "$@" in
        lock)
            if ps aux | grep -v grep | grep -v "$PROCCESS" | grep -E "$(basename $0).*(lock)" ; then
                NOREPORTS=1 el_error "$(basename $0) already running, args '$@', processes:\n$(ps aux | grep -v grep | grep -v "$PROCCESS" | grep "$(basename $0)" )"
                exit
            fi
            ;;
        suspend|hibernate|hibernate-or-shutdown|stop|shutdown|reboot)
            if ps aux | grep -v grep | grep -v "$PROCCESS" | grep -E "$(basename $0).*(suspend|hibernate|hibernate-or-shutdown|stop|shutdown|reboot)" ; then
                NOREPORTS=1 el_error "$(basename $0) already running, args '$@', processes:\n$(ps aux | grep -v grep | grep -v "$PROCCESS" | grep "$(basename $0)" )"
                exit
            fi
            ;;
    esac
fi
# set lock
echo $$ > "$lockfile"

# traps needs to be after the lock verification, in order to not remove it when we are already running
trap "exit_ok" EXIT
trap "exit_error" 1 3 5 6 14 15 ERR TERM

# SET the lock file
echo "$$" > "$lockfile"


# end lock system }}}

usage(){
    # Usage
    if [[ -z "${1}" ]] ; then
        echo -e "Usage: $(basename $BASH_SOURCE) suspend|hibernate|hibernate-or-shutdown|stop|shutdown|reboot|lock"
        echo -e ""
        echo -e "Notes: 'stop' means suspending the system and hibernate it after a while (useful for when you don't know how much time you will stop the system, this should be the default stop of the system)"
        echo -e ""
        exit 1
    fi
}

guitool(){
    local mode message
    mode="$1"
    shift
    message="$1"
    shift

    case "$mode" in
        question)
            if [[ -n "$DISPLAY" ]] ; then
                if $guitool --question --text="$message" ; then
                    return 0
                else
                    return 1
                fi
            else
                if el_confirm "$message" ; then
                    return 0
                else
                    return 1
                fi
            fi
            ;;
        warning)
            if [[ -n "$DISPLAY" ]] ; then
                $guitool --warning --text="$message"
            else
                el_warning "$message"
            fi
            ;;
        error)
            if [[ -n "$DISPLAY" ]] ; then
                $guitool --error --text="$message"
            else
                el_error "$message"
            fi
            ;;
        info)
            if [[ -n "$DISPLAY" ]] ; then
                $guitool --info --text="$message"
            else
                el_info "$message"
            fi
            ;;
        *)
            el_error "unknown action for $FUNCNAME ($mode)"
            ;;
    esac
}


show_execution_stacks_from_names(){
    local pid name execution_stack

    for name in "$@"
    do
        for pid in $(pidof -x "$name" )
        do
            execution_stack="$( pstree -A -l -n -s "$pid" )"
            execution_stack="$( echo "$execution_stack" | sed -e 's|^init---||g' -e 's|^.*lightdm---||g' -e 's|---pstree||g' -e 's|---enlightenment---|---|g' -e 's|---ck-launch-sessi||g' -e's|-+-ck-launch-sessi||g' -e 's|---enlightenment_s||g' -e 's|---e_wrapper---e_wrapper|---e_wrapper|g' -e 's|---el_report_to_elive||g' )"

            if [[ -n "$execution_stack" ]] ; then
                echo "$execution_stack"
            fi
        done
    done
}


check_and_inform_when_processes_running(){
    # pre {{{
    local watcher

    local message_wait_processes_title
    message_wait_processes_title="$( printf "$( eval_gettext "Waiting for processes to finish" )" "" )"

    local message_wait_processes_generic
    message_wait_processes_generic="$( printf "$( eval_gettext "Your computer will shutdown after some remaining processes finish." )" "" )"


    # - pre }}}

    local message_waitingfor
    message_waitingfor="$( printf "$( eval_gettext "Some processes are still running. Waiting for them to finish:" )" "" )"


    # kill possible useless ones {{{
    for i in tumblerd mpg123 mplayer smplayer vlc rage_thumb mpv mplayer mplayer2 smplayer vlc rage
    do
        killall -q "$i"     1>/dev/null 2>&1
        killall -q -9 "$i"  1>/dev/null 2>&1
    done
    # - kill possible useless ones }}}

    # TODO: temporal checks: these are meant to be other poweroff processes, we should simply exit in case that they are (already) running?
    if \
        pidof -zxq 'xfce4-power-manager' || \
        pidof -zxq 'mate-power-manager' || \
        pidof -zxq 'dalston-power-applet' || \
        pidof -zxq 'gnome-power-manager' || \
        pidof -zxq 'kpowersave' || \
        pidof -zxq 'guidance-power-manager.py' ; then
        # just report, because we don't know if we should ingore them or not
        el_warning "another poweroff system running?:\n\n$( show_execution_stacks_from_names xfce4-power-manager mate-pwoer-manager dalston-power-applet gnome-power-manager kpowersave guidance-power-manager.py )"

        #( guitool warning "Seems like we have other poweroff services already running?"  & )
    fi


    # apt / dpkg processes
    if fuser /var/lib/dpkg/lock /var/lib/apt/lists/lock  1>/dev/null 2>&1 ; then
        local message_wait_processes
        message_wait_processes="$( printf "$( eval_gettext "Some package manager(s) are still running, is probably doing an upgrade of the system. Your computer will automatically shut down after these processes finish." )" "" )"

        # seems like desktop is off, so we cannot send a notify message?
        ( guitool info "$message_wait_processes" & )
        #el_speak_text "waiting packages process to finish"

        # and wait before to proceed:
        apt_dpkg_wait
    fi

    # other possible X processes:
    for watcher in elive-upgrader mkdeb apt apt-get dpkg fsck sync umount fstrim btrfs sync-repo
    do
        el_debug "checking for process ${watcher}..."
        if pidof -zcxq "$watcher" ; then
            # wait them to finish before to check again: more exactly: elive-upgrader (delayed wait) will close if we are shutting down
            sleep 2

            # note: pidof doesn't show processes like "fstrim"
            #if pidof -zcxq "$watcher" ; then
            if ps axk comm o comm,args | grep -qs "^${watcher}.*${watcher} " ; then

                # show a message after 4 seconds waiting for shutdown computer:
                ( sleep 2 ; guitool info "${message_waitingfor} $watcher" & )

                #el_speak_text "Please wait, some processes are still running. Wating for $watcher"

                # TODO: temporal report:
                NOREPORTS=1 el_warning "$(basename $0): waiting for process: $watcher"
                #log_msg... ?

                #( guitool info "${message_wait_processes_title}. ${message_wait_processes_generic}:\n\n$watcher" & )
                ( sleep 5 ; guitool info "${message_wait_processes_generic}:\n\n$watcher" & )

                waitfor $watcher
                sleep 10 ; sync ; sleep 2
            fi
        fi
    done

    # wait for post-install user desktop steps, they needs to finish correctly:
    # but not when in live, otherwise we may have a very slow shutdown due to delayed hooks
    if ! ((is_live)) ; then
        if ps ux | grep -v grep | grep -v "$$" | grep -qsE "/(user-manager|deliver)/hooks.d/" ; then

            ( guitool info "${message_waitingfor} Desktop Setup" & )

            # wait them to finish
            while true
            do
                sleep 1

                if ! ps ux | grep -v grep | grep -v "$$" | grep -qsE "/(user-manager|deliver)/hooks.d/" ; then
                    break
                fi
            done
        fi
    fi
}

check_if_already_shutdown_process(){
    if \
        pidof -zxq '/sbin/pm-suspend' || \
        pidof -zxq '/sbin/pm-suspend-hybrid' || \
        pidof -zxq '/sbin/pm-hibernate' || \
        pidof -zxq '/usr/sbin/pm-suspend' || \
        pidof -zxq '/usr/sbin/pm-suspend-hybrid' || \
        pidof -zxq '/usr/sbin/pm-hibernate' || \
        pidof -zxq '/sbin/shutdown' || \
        pidof -zxq '/sbin/reboot' || \
        pidof -zxq '/usr/sbin/shutdown' || \
        pidof -zxq '/usr/sbin/reboot' || \
        /sbin/runlevel | grep -qs "[06]" ; then

        return 1
    else
        return 0
    fi
}

inform_if_errors(){
    local lines

    if [[ "$1" = "delayed" ]] ; then
        sleep 15
    fi

    lines="$( dmesg | tail -n 300 )"
    lines_tmp="$( echo "$lines" | grep -i error | grep -i sector | grep -iv mmcblk )"

    # HD data loss?
    if [[ "$( echo "$lines_tmp" | wc -l )" -gt "3" ]] ; then
        guitool warning "$( eval_gettext "The following error messages have been found in your system. This can be due to having disconnected an external hard disk without ejecting it, or maybe the Suspend features are not working properly on your computer. In any case, you need to check the source of this issue because it can cause data loss. It is also essential to make sure that your hard disk is always in a healthy state." ) dmesg\n\n$( echo "${lines_tmp}" | sort -u | tail -n 50 )"
        el_warning "possible data loss recovering from suspension / hibernation: $( echo "$lines" | tail -10 )"
    fi

    # vbox errors:
    lines_tmp="$( echo "$lines" | grep -iE "(vminfo.*error|VERR_NOT_SUPPORTED|error.*virtualbox)" )"
    if [[ "$( echo "$lines_tmp" | wc -l )" -gt "3" ]] ; then
        guitool warning "$( eval_gettext "It is possible that your virtual environment doesn't support the suspension or hibernation features. You can check your system logs using the command:" ) dmesg"
        #el_warning "possible vbox errors: $( echo "$lines" | tail -10 )"
    fi

    lines_tmp="$( echo "$lines" | grep -iE "\[ cut here \]" )"
    if [[ "$( echo "$lines_tmp" | wc -l )" -gt "1" ]] ; then
        guitool warning "$( eval_gettext "Some system messages have been found after recovering. You can check them using the command:" ) dmesg"
        el_warning "possible backtrace founds: $( echo "$lines" | tail -n 42 )"
    fi
}

do_desktop_lock(){
    mode="$1"
    shift

    # e16
    if [[ -n "$EROOT" ]] ; then
        if [[ -x "$(which i3lock-fancy)" ]] ; then
            if [[ "$mode" = "blank" ]] ; then
                ( sleep 6 ; xset dpms force off ; ) &
            fi
            i3lock-fancy -g

            waitfor i3lock-fancy && xset dpms 0 0 0
        else
            if [[ -x "$(which i3lock)" ]] ; then
                if [[ "$mode" = "blank" ]] ; then
                    ( sleep 6 ; xset dpms force off ; ) &
                fi
                i3lock -f -c 000000

                waitfor i3lock && xset dpms 0 0 0
            fi
        fi
    else
        if [[ -n "$E_START" ]] ; then
            #enlightenment_remote -lock
            enlightenment_remote -desktop-lock
        fi
    fi
}

do_desktop_reload(){
    if [[ -n "$EROOT" ]] ; then
        eesh restart
    else
        if [[ -n "$E_START" ]] ; then
            enlightenment_remote -restart
        fi
    fi
}

do_desktop_logout(){
    if [[ -n "$EROOT" ]] ; then
        if [[ "$1" = "menu" ]] ; then
            eesh exit logout
        else
            eesh exit
        fi
    else
        if [[ -n "$E_START" ]] ; then
            enlightenment_remote -exit
        fi
    fi
}


do_fallback(){
    case "$1" in
        reboot)
            if ! /sbin/reboot 2>/dev/null ; then
                el_sudo /sbin/reboot
                return $?
            fi
            # we still here? report
            #/sbin/reboot 2>>"$logs_error"
            #is_failed=4
            ;;
        shutdown|poweroff|halt)
            if ! /sbin/poweroff 2>/dev/null ; then
                el_sudo /sbin/poweroff
                return $?
            fi
            # we still here? report
            #/sbin/poweroff 2>>"$logs_error"
            #is_failed=5
            ;;
        suspend-then-hibernate)
            if ! /usr/sbin/pm-suspend-hybrid 2>/dev/null ; then
                el_sudo /usr/sbin/pm-suspend-hybrid
                return $?
            fi
            ;;
        hibernate|stop)
            if ! /usr/sbin/pm-hibernate 2>/dev/null ; then
                el_sudo /usr/sbin/pm-hibernate
                return $?
            fi
            ;;
        suspend)
            if ! /usr/sbin/pm-suspend 2>/dev/null ; then
                el_sudo /usr/sbin/pm-suspend
                return $?
            fi
            ;;
    esac
}

do_action(){
    # pre {{{
    local action is_failed

    action="$1"
    shift

    # - pre }}}
    # checks {{{

    # check if system is already shutting down from another process
    if ! check_if_already_shutdown_process ; then
        guitool info "$( eval_gettext "Ignoring action, system is already shutting down" )"
        exit
    fi

    # check if fstrim is running, so we need to wait
    if pidof -zxq '/usr/sbin/fstrim' ; then
        guitool info "$( eval_gettext "IMPORTANT: FSTRIM is running, we need to wait until it finishes before shutting down. Do not close the computer or you might lose data. Don't worry, Elive automatically will shut down when the process finishes." )" &

        while pidof -zxq '/usr/sbin/fstrim' ; do
            sleep 2
        done

        # flush
        sleep 1 ; sync ; sleep 4
    fi

    # check if btrfs is running, so we need to wait
    if pidof -zxq '/usr/bin/btrfs' ; then
        guitool info "$( eval_gettext "IMPORTANT: Tasks for BTRFS are currently running. It is very important to wait until they finish before shutting down the computer or you can lose your data. But don't worry, Elive will automatically shut down your computer once these processes are completed." )" &

        while pidof -zxq '/usr/bin/btrfs' ; do
            sleep 2
        done

        # flush
        sleep 1 ; sync ; sleep 4
    fi


    # live mode?
    local message_live_disabled
    message_live_disabled="$( printf "$( eval_gettext "It is not suggested to perform a suspension of your computer while you are using Elive in Live mode. You need to install Elive on your computer to use this feature." )" "" )"

    if ((is_live)) ; then
        case "$action" in
            hibernate|suspend-then-hibernate)
                el_notify normal "drive-removable-media" "Live mode detected" "$message_live_disabled"
                exit
                ;;
        esac
    fi

    # wait for possible proccesses running
    case "$action" in
        suspend|hibernate|suspend-then-hibernate|lock)
            true
            ;;
        shutdown|poweroff|reboot)
            check_and_inform_when_processes_running
            ;;
        *)
            el_warning "not implemented $action"
            ;;
    esac

    # check and infor for possible things required
    case "$action" in
        hibernate|suspend-then-hibernate)
            # check if we have a resume configuration
            if ! grep -qsE "LINUX_DEFAULT.*resume=" /etc/default/grub ; then
                guitool error "$( eval_gettext "Your GRUB configuration doesn't include the details of the swap space (where to perform the hibernation). If you want to have hibernation you should reinstall Elive and add a swap partition." )"
                exit
            fi
            # check for using swap space:
            if [[ "$( LC_ALL="$EL_LC_EN" free -m | grep -i "^Swap:" | awk '{print $2}' )" = 0 ]] ; then
                if grep -qsw "swap" /etc/fstab ; then
                    gksu "swapon -a"
                    sync
                fi
                if [[ "$( LC_ALL="$EL_LC_EN" free -m | grep -i "^Swap:" | awk '{print $2}' )" = 0 ]] ; then
                    guitool warning "$( eval_gettext "You do not have a swap partition that is required to enable hibernation. You can reinstall Elive and add a swap partition." )"
                    exit
                fi
            fi
            ;;
    esac

    # check for enough swap space needed:
    if echo "$action" | grep -Fqs "hibernate" ; then
        #mem_ram_used="$( LC_ALL=C free -m -t | grep "^Mem:" | awk '{print $3}' )"
        mem_ram_used="$( LC_ALL=C free -m -t | grep -i "^Total:" | awk '{print $3}' )"
        mem_swap_free="$( LC_ALL=C free -m -t | grep -i "^Swap:" | awk '{print $4}' )"
        mem_swap_free="$( echo "${mem_swap_free} - (( ${mem_swap_free} / 100 ) * 10 )" | LC_ALL=C bc -l | sed -e 's|\..*$||' )" # reduce the free space number to its 90%

        if [[ "$mem_ram_used" -ge "${mem_swap_free}" ]] ; then
            el_info "Required SWAP free space is not enough (RAM used '${mem_ram_used}', Swap free space '${mem_swap_free}'). Going to fre esome memory..."
            for i in chrome chromium google-chrome firefox firefox-esr palemoon tumblerd opera
            do
                el_debug "killing $i"
                killall "$i"     1>/dev/null 2>&1
                killall -9 "$i"  1>/dev/null 2>&1
            done
            sync
            sleep 2
        fi
    fi

    # - checks }}}
    # run
    sync

    if ((is_systemd)) ; then

        # run
        systemctl "$action" 2>&1 | colors-remove > "$logs_error"
        if LC_ALL=C systemctl status "${action%.*}.target" | grep -i failed ; then
            is_failed=1
        else
            unset is_failed
        fi

        if ((is_failed)) ; then
            # maybe with sudo?
            if el_check_sudo_automated ; then

                el_sudo systemctl "$action"
                if LC_ALL=C systemctl status "${action%.*}.target" | grep -i failed ; then
                    is_failed=1
                else
                    unset is_failed
                fi

            else
                is_failed=2
                #el_warning "no privileges for el_sudo, implement a gksu feature instead? (attempting $action):\n$(cat "$logs_error" )\n$( systemctl status ${action%.*}.target 2>&1 )"
            fi
        fi
    else
        is_failed=3
    fi

    if ((is_failed)) ; then
        if do_fallback "$action" ; then
            unset is_failed
        fi
    fi


    # errors? {{{
    # show errors if any
    if ((is_failed)) ; then
        if ! [[ -s "$logs_error" ]] ; then
            dmesg | grep -iE "(hibernate|suspend|shutdown|halt|reboot)" | grep ERROR | sed -e 's|^.*\] \[||g' | uniq | sed -e 's|^.*\*ERROR\* ||g' | tail -n 10 >> "$logs_error"
        fi

        if [[ -s "$logs_error" ]] ; then
            guitool error "$( cat "$logs_error" | sort -u )"
        fi

        if ! check_if_already_shutdown_process ; then
            if [[ -n "$( cat "$logs_error" | grep -v "(vmwgfx)" )" ]] ; then
                el_warning "FAIL with is_failed '$is_failed' code, maybe no privileges for el_sudo, implement a gksu feature instead? (attempting $action):\nlog errosr: $(cat "$logs_error" | sort -u )\nsystemctl status ${action}: $( systemctl status ${action%.*}.target 2>&1 )\ngroups: $(groups)\nwho: $(who)"
            fi
        fi

        # do not continue with the "BACK" state if we failed, stop here
        return
    fi


    # - errors? }}}

    #
    # BACK from suspension
    #

    # let the system finish to come back
    sleep 5
    sync


    case "$action" in
        suspend|hibernate)
            # check for errors
            inform_if_errors "delayed" &

            # load back some configurations after suspensions, seems like sometimes the hardware loses its settings:
            if [[ -n "$EROOT" ]] ; then
                touchpad-configurator --load
            fi

            # always lock if we didn't needed to insert password on boot
            if ! ((is_live)) && ! grep -qs "_crypt.*UUID.*luks" /etc/crypttab ; then
                if [[ "$action" = "suspend" ]] ; then
                    do_desktop_lock blank
                else
                    do_desktop_lock
                fi
            fi

            # play audio of system restored
            hour="$(date +%k)"
            if ! ((NOVOICE)) && ! ((SILENT)) && \
                [[ "${hour}" -lt "21" ]] && [[ "$hour" -gt "8" ]] ; then

                soundfile="/usr/share/sounds/elive/system-restored.mp3"

                if [[ -x "$(which "$( basename "$mplayer" | awk '{print $1}' )" )" ]] ; then
                    ( precache "$soundfile" 2>/dev/null ; timeout 30 $mplayer "$soundfile" & )
                else
                    el_speak_text "welcome back to ailive"
                fi
            fi

            # hibernation seems to require an e16 restart, at least in vbox:
            #if [[ "$action" = "hibernate" ]] && [[ -n "$EROOT" ]] ; then
                #eesh restart
            #fi
            if [[ "$action" = "hibernate" ]] && el_check_sudo_automated ; then
                # reload swap if possible, to have the desktop resonsive
                sleep 5 ; sync
                el_info "Freeing SWAP..."
                el_sudo swapoff -a 1>/dev/null 2>&1
                el_sudo swapon -a 1>/dev/null 2>&1
                el_info "SWAP re-enabled"
            fi
            ;;
    esac


}



main(){
    # pre {{{
    local arg

    if [[ -z "$1" ]] ; then
        usage
    fi

    logs_error="$( mktemp )"
    el_add_on_exit  rm -f "$logs_error"

    if pidof -zcq systemd ; then
        is_systemd=1
    else
        if ! [[ -e "/var/lib/dpkg/info/sysvinit-core.list" ]] ; then
            is_systemd=1
        fi
    fi

    if grep -qs "boot=live" /proc/cmdline ; then
        is_live=1
    fi

    if [[ -x "$( which mpv )" ]] ; then
        if [[ -e "/var/lib/dpkg/info/pulseaudio.list" ]] && [[ -n "$(pidof pulseaudio)" ]] ; then
            mplayer="mpv --really-quiet --no-terminal --no-video --no-config --no-input-terminal --no-osc --no-input-cursor --ao=pulse"
        else
            mplayer="mpv --really-quiet --no-terminal --no-video --no-config --no-input-terminal --no-osc --no-input-cursor --ao=alsa"
        fi
    else
        if [[ -x "$( which mplayer )" ]] ; then
            if [[ -e "/var/lib/dpkg/info/pulseaudio.list" ]] && [[ -n "$(pidof pulseaudio)" ]] ; then
                mplayer="mplayer -noconfig all -really-quiet -nojoystick -nolirc -ao pulse"
            else
                mplayer="mplayer -noconfig all -really-quiet -nojoystick -nolirc -ao alsa"
            fi
        fi
    fi

    el_config_get

    # }}}

    for arg in "$@"
    do
        case "$arg" in
            suspend)
                is_suspend=1
                do_action "suspend"
                ;;
            hibernate)
                is_hibernate=1
                do_action "hibernate"
                ;;
            hibernate-or-shutdown)
                if grep -qsw "swap" /etc/fstab && ! ((is_live)) ; then
                    is_hibernate=1
                    do_action "hibernate"
                else
                    is_shutdown=1
                    do_action "poweroff"
                fi
                ;;
            shutdown|poweroff|halt)
                is_shutdown=1
                do_action "poweroff"
                ;;
            reboot)
                is_reboot=1
                do_action "reboot"
                ;;
            lock)
                is_lock=1
                do_desktop_lock
                ;;
            logout)
                is_logout=1
                do_desktop_logout
                ;;
            logoutmenu)
                is_logout=1
                do_desktop_logout menu
                ;;
            reload)
                is_reload=1
                do_desktop_reload
                ;;
            stop|"suspend-then-hibernate")
                #is_stop=1
                do_action "suspend-then-hibernate"
                ;;
            *)
                usage
                ;;
        esac
    done


    wait

}

apt_dpkg_wait(){
    local is_waiting i
    i=0

    tput sc
    while fuser /var/lib/dpkg/lock /var/lib/apt/lists/lock  >/dev/null 2>&1 ; do
        case $(($i % 4)) in
            0 ) j="-" ;;
            1 ) j="\\" ;;
            2 ) j="|" ;;
            3 ) j="/" ;;
        esac
        tput rc
        echo -en "\r[$j] Waiting for other software managers to finish..."
        is_waiting=1

        LC_ALL=C  sleep 0.5
        ((i=i+1))
    done

    # make sure that dpkg/apt still not running
    if ((is_waiting)) ; then
        unset is_waiting
        LC_ALL=C  sleep 3
        # recursively call it again
        $FUNCNAME
    fi
}

#
#  MAIN
#
main "$@"

# vim: set foldmethod=marker :
